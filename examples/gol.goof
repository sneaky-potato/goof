include "std.goof"

macro ROWS 8 end
macro COLS 16 end
macro PUTD_BUFFER_CAP 32 end

macro nbors mem end
macro time nbors 8 + end
macro putd-buffer time 8 + end
macro matrix nbors PUTD_BUFFER_CAP + end


// 10 -> "10"
macro putd
    if dup 0 = do
        "0" puts
    else
        putd-buffer PUTD_BUFFER_CAP +
        // n ptr
        while over 0 > do
            1 - dup rot rot
            // ptr ptr n
            10 divmod
            // ptr ptr n%10 n/10
            rot rot swap
            // ptr n/10 ptr n%10
            48 + . swap
        end
        dup // n ptr len
        putd-buffer PUTD_BUFFER_CAP + swap - swap puts
   end
   drop
end

macro display
    ROWS 0
    // ROWS i
    while 2dup > do
        COLS 0
        // ROWS i COLS j
        while 2dup > do
            rot rot // ROWS COLS j i
            2dup // ROWS COLS j i j i
            get_value
            if dup 1 = do
                "#" puts
            else
                "." puts
            end
            drop
            rot // ROWS i COLS j
            1 +
        end
        drop drop
        "\n" puts
        1 +
    end
    drop drop
end

macro set_value
    // value j i
    COLS * + 8 * matrix + swap .64
end

macro get_value
    // j i
    COLS * + 8 * matrix + ,64
end

macro mod
    // a b
    dup // a b b
    rot // b a b
    + // b (a+b)
    swap
    %
end

macro norm
    // j i
    ROWS mod // j i%ROWS
    swap COLS mod // i%ROWS j%COLS
    swap
end

macro get_nbor
    // j i dj di
    rot rot // j dj di i
    + rot + // j dj i+di --> i+di j+dj
    swap
    norm 
    get_value
    if dup 1 = swap 3 = | do
        nbors ,64 1 + nbors swap .64
    end
end

macro count_nbors
    nbors 0 .64 // nbors
    // j i
    2dup -1 -1 get_nbor
    2dup 0 -1 get_nbor
    2dup 1 -1 get_nbor
    2dup -1 0 get_nbor
    2dup 1 0 get_nbor
    2dup -1 1 get_nbor
    2dup 0 1 get_nbor
    2dup 1 1 get_nbor
    drop drop
end

macro next
    ROWS 0
    // ROWS i
    while 2dup > do
        COLS 0
        // ROWS i COLS j
        while 2dup > do
            rot rot // ROWS COLS j i
            2dup // ROWS COLS j i j i
            count_nbors // ROWS COLS j i
            if 2dup get_value 1 = do
                // ROWS COLS j i
                if nbors ,64 dup 2 < swap 3 > | do
                    2dup 3 rot set_value
                end
            elif 2dup get_value 0 = do
                if nbors ,64 3 = do
                    2dup 2 rot set_value
                end
            end
            
            rot // ROWS i COLS j
            1 +
        end
        drop drop
        1 +
    end
    drop drop


    ROWS 0
    // ROWS i
    while 2dup > do
        COLS 0
        // ROWS i COLS j
        while 2dup > do
            rot rot // ROWS COLS j i
            2dup // ROWS COLS j i j i
            get_value
            if dup 3 = do
                drop
                2dup 0 rot set_value     
            elif dup 2 = do
                drop
                2dup 1 rot set_value
            else
                drop
            end
            rot // ROWS i COLS j
            1 +
        end
        drop drop
        1 +
    end
    drop drop
end

// 010
// 001
// 111
1 1 0 set_value
1 2 1 set_value
1 0 2 set_value
1 1 2 set_value
1 2 2 set_value

time 1 .

while 1 (bool) do
    next
    display
    "\033[" puts ROWS putd "A\033[" puts COLS putd "D" puts
    0 time sleep drop
end
