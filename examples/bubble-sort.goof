include "std.goof"

const BUFFER_CAP 256 end
const PUTD_BUFFER_CAP 32 end

memory putd-buffer PUTD_BUFFER_CAP end
memory cnt 8 end
memory nums 0 end

proc putd int -- --
    if dup 0 = do
        "0" puts
    else
        0 (bool)
        if over 0 < do
            drop
            -1 *
            1 (bool)
        end swap
        putd-buffer PUTD_BUFFER_CAP +
        // flag n ptr
        while over 0 > do
            1 - dup rot rot
            // ptr ptr n
            10 divmod
            // ptr ptr n%10 n/10
            rot rot swap
            // ptr n/10 ptr n%10
            48 + . swap
        end
        rot rot // n ptr flag
        if do
            1 - dup 45 .
        else end
        // n ptr
        dup
        putd-buffer PUTD_BUFFER_CAP + swap - swap puts
   end
   drop
end

cnt
BUFFER_CAP over stdin read drop // read cnt

dup stoi     // mem[cnt] cnt
.64
cnt ,64      // cnt
0 
// cnt i
while 2dup > do
    dup 8 * nums +
    BUFFER_CAP over stdin read drop
    dup stoi .64
    1 + // i++
end

drop
0 
// cnt i
while 2dup > do
    over 1 - // cnt - 1
    0
    // cnt-1 j
    while 2dup > do
        dup 8 * nums +     // &nums[j]
        dup 8 +            // &nums[j] &nums[j+1]
        ,64 swap ,64       // nums[j+1] nums[j]

        if < do               // if (nums[j] > nums[j+1])
            dup 8 * nums + // &nums[j]
            dup 8 + 2dup   // &nums[j] &nums[j+1] &nums[j] &nums[j+1]
            ,64 swap ,64   // &nums[j] &nums[j+1] nums[j+1] nums[j]
            rot rot        // &nums[j] nums[j+1] nums[j] &nums[j+1]
            swap .64 .64
        end
        1 + // j++
    end
    drop drop
    1 + // i++
end

drop
0
// cnt i
while 2dup > do
    dup 8 * nums + ,64
    putd "\n" puts
    1 +
end
drop drop
