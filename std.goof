macro stdin  0 end
macro stdout 1 end
macro stderr 2 end

macro SYS_READ 0 end
macro SYS_WRITE 1 end
macro SYS_CLOSE 3 end
macro SYS_FSTAT 5 end
macro SYS_MMAP 9 end
macro SYS_SLEEP 35 end
macro SYS_EXIT 60 end
macro SYS_OPENAT 257 end

macro O_RDONLY 0 end
macro AT_FDCWD -100 end

macro MAP_PRIVATE 2 end
macro PROT_READ 1 end

macro write SYS_WRITE syscall3 end
macro read SYS_READ syscall3 end
macro openat SYS_OPENAT syscall3 end
macro mmap SYS_MMAP syscall6 end
macro fstat SYS_FSTAT syscall2 end
macro sleep SYS_SLEEP syscall2 end
macro close SYS_CLOSE syscall1 end
macro exit SYS_EXIT syscall1 drop end

macro / divmod drop end
macro % divmod swap drop end

macro sizeof(stat) 144 end
macro stat.st_dev 0 + end
macro stat.st_ino 8 + end
macro stat.st_mode 24 + end
macro stat.st_nlink 16 + end
macro stat.st_uid 28 + end
macro stat.st_gid 32 + end
macro stat.st_rdev 40 + end
macro stat.st_size 48 + end
macro stat.st_blksize 56 + end
macro stat.st_blocks 64 + end
macro stat.st_atim 72 + end
macro stat.st_mtim 88 + end
macro stat.st_ctim 104 + end
macro sizeof(stat.st_dev) 8 end
macro sizeof(stat.st_ino) 8 end
macro sizeof(stat.st_mode) 4 end
macro sizeof(stat.st_nlink) 8 end
macro sizeof(stat.st_uid) 4 end
macro sizeof(stat.st_gid) 4 end
macro sizeof(stat.st_rdev) 8 end
macro sizeof(stat.st_size) 8 end
macro sizeof(stat.st_blksize) 8 end
macro sizeof(stat.st_blocks) 8 end
macro sizeof(stat.st_atim) 16 end
macro sizeof(stat.st_mtim) 16 end
macro sizeof(stat.st_ctim) 16 end

// ptr -> strlen(ptr)
// string pointed to by ptr must be null terminated
macro strlen
    dup
    while dup , 0 != do 1 + end
    swap -
end

// ptr -> int(ptr)
// string pointed to by ptr must be null terminated
macro stoi
    0 (bool)
    if over , 45 = do
        drop
        1 +
        1 (bool)
    end
    swap
    0
    // flag ptr val
    over ,
    // flag ptr val *ptr
    while dup 58 < over 47 > & do
        // ptr val *ptr
        48 -
        // ptr val *ptr-'0'
        swap 
        10 * +
        // ptr [*ptr-'0' + val*10]
        swap
        // [*ptr-'0' + val*10] ptr
        1 +
        swap
        // ptr+1 [*ptr-'0' + val*10]
        over ,
    end
    drop swap 
    drop
    // flag val
    if over do
        -1 *
    end
    swap drop
end

macro puts
    stdout write drop
end

macro eputs
    stderr write drop
end

// ptr -> *ptr++
macro inc64 dup ,64 1 + .64 end

// ptr -> *ptr--
macro dec64 dup ,64 1 - .64 end

// n -> &argv[n]
macro nth_argv
   8 * argv + ,64 (ptr)
end

// s1, s2 -> true / false
macro streq
end
